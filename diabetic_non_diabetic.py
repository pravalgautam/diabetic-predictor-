# -*- coding: utf-8 -*-
"""diabetic non diabetic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSzoRAJnomtgB2WSdZMvMtJqi6vVcOWm
"""

import numpy as np
import pandas as pd 
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

x=pd.read_csv("/content/diabetes.csv")

x.head()

x.shape

x.info()

x['Outcome'].value_counts()

x.groupby('Outcome').mean()

X=x.drop('Outcome',axis=1)
Y=x['Outcome']
print(X)
print(Y)

scaler = StandardScaler()
scaler.fit(X)
std_data=scaler.transform(X)

print(std_data)

X=std_data
Y=x['Outcome']

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2,stratify=Y)

k=svm.SVC(kernel='linear')
k.fit(X_train,Y_train)

"""#accuracy preictor

"""

xtrain_prediction=k.predict(X_train)
acc=accuracy_score(xtrain_prediction,Y_train)
print("accuracyScore :",acc)

xtest_prediction=k.predict(X_test)
acc=accuracy_score(xtest_prediction,Y_test)
print("accuracyScore :",acc)

input_data=(1,103,30,38,83,43.3,0.183,33,)
numpyarr =np.asarray(input_data)
reshapeforonearr=numpyarr.reshape(1,-1)

std_data=scaler.transform(reshapeforonearr)

prediction =k.predict(std_data)
print(prediction)
if prediction[0]== 0:
   print(" non diabetic")
else:
   print("diabetic")